{
  "author": {
    "name": "nikeee",
    "email": "holzig@outlook.com",
    "url": "https://github.com/nikeee"
  },
  "name": "line-readable-stream",
  "description": "Provides a stream wrapper for a node.js Readable Stream for line-by-line reading",
  "version": "1.1.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/nikeee/node-line-readable-stream.git"
  },
  "main": "line-readable-stream.js",
  "dependencies": {},
  "keywords": [
    "stream",
    "input",
    "line",
    "line-buffered",
    "readable stream",
    "typescript"
  ],
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "bugs": {
    "url": "https://github.com/nikeee/node-line-readable-stream/issues",
    "email": "holzig@outlook.com"
  },
  "license": "Beerware",
  "readmeFilename": "README.md",
  "readme": "node-line-readable-stream\r\n==============\r\n\r\n\r\nThis is a port of [bluesmoon's node-line.input-stream](https://github.com/bluesmoon/node-line-input-stream). Provides a stream wrapper for a node.js Readable Stream for line-by-line reading.\r\n\r\nHow to install\r\n---------------\r\n\r\nNode:\r\n\r\n\tnpm install line-readable-stream\r\n\t\r\nExample Usage\r\n----------------\r\n\r\nLike [Readable Stream](http://nodejs.org/api/stream.html#stream_readable_stream) with a <code>line</code> event.\r\n\r\nJavaScript:\r\n```JavaScript\r\nvar LineReadableStream = require('line-readable-stream');\r\nvar fs = require('fs');\r\n\r\nvar stream = new LineReadableStream(fs.createReadStream(\"foo.txt\", { flags: \"r\" }));\r\nstream.setEncoding(\"utf8\");\r\nstream.setDelimiter(\"\\n\");  // optional string, defaults to \"\\n\"\r\n\r\nstream.on(\"error\", function(err) {\r\n\t\tconsole.log(err);\r\n\t});\r\n\r\nstream.on(\"data\", function(chunk) {\r\n\t\t// You don't need to use this event\r\n\t});\r\n\r\nstream.on(\"line\", function(line) {\r\n\t\t// Sends you lines from the stream delimited by delimiter\r\n\t});\r\n\r\nstream.on(\"end\", function() {\r\n\t\t// No more data, all line events emitted before this event\r\n\t});\r\n\r\nstream.on(\"close\", function() {\r\n\t\t// Same as ReadableStream's close event\r\n\t});\r\n\r\nif(stream.readable) {\r\n\tconsole.log(\"stream is readable\");\r\n}\r\n\r\n// Also available: resume(), pipe()\r\n```\r\n\r\nTypeScript:\r\n\r\n```TypeScript\r\n///<require path=\"typings/node/node.d.ts\"/>\r\n///<require path=\"node_modules/line-readable-stream/LineReadableStream.d.ts\"/>\r\n\r\n// If you know a better war to include the .ts file that comes with the npm package, let me know.\r\nimport LineReadableStream = require('node_modules/line-readable-stream/LineReadableStream');\r\nimport fs = require('fs');\r\n\r\nvar stream = new LineReadableStream(fs.createReadStream(\"foo.txt\", { flags: \"r\" }));\r\nstream.setEncoding(\"utf8\");\r\nstream.setDelimiter(\"\\n\");  // optional string, defaults to \"\\n\"\r\n\r\nstream.on(\"error\", err => console.log(err));\r\n\r\nstream.on(\"data\", chunk => {\r\n\t\t// You don't need to use this event\r\n\t});\r\n\r\nstream.on(\"line\", line => {\r\n\t\t// Sends you lines from the stream delimited by delimiter\r\n\t\tconsole.log(\"Line: \" + line);\r\n\t});\r\n\r\nstream.on(\"end\", () => {\r\n\t\t// No more data, all line events emitted before this event\r\n\t});\r\n\r\nstream.on(\"close\", () => {\r\n\t\t// Same as ReadableStream's close event\r\n\t});\r\n\r\nif(stream.readable)\r\n\tconsole.log(\"stream is readable\");\r\n\r\n\r\n// Also available: resume(), pipe()\r\n```\r\n\r\nUsage information\r\n-----------------\r\n\r\n\r\nYou can also attach listeners to any event specific to the underlying stream, ie,\r\nyou can listen to the <code>open</code> event for streams created by [<code>fs.createReadStream()</code>](http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options)\r\nor the <code>connect</code> event for [Net](http://nodejs.org/api/net.html) streams.\r\n\r\nA side effect of this is that you can add a listener for any junk string and <code>LineReadableStream</code> will\r\npretend that it worked.  The event listener may never be called though.\r\n\r\n\r\n- The delimiter is not included in the line passed to the <code>line</code> handler\r\n- Even though this is called <code>line-readable-stream</code>, you can delimit by any string, so for example, setting delimiter to `\"\\n\\n\"` will read by paragraph (sort of).\r\n- You can set the delimiter to a regular expression, which let's you do cool things like drop multiple blank lines: <code>/[\\r\\n]+/</code>\r\n- All methods return `this`, so can be chained\r\n",
  "gitHead": "cd2ede41bef26be942c039a1b09d55ada587e72e",
  "homepage": "https://github.com/nikeee/node-line-readable-stream",
  "_id": "line-readable-stream@1.1.4",
  "scripts": {},
  "_shasum": "b35484c26cdd2b52ce92e868795c1af0f3784960",
  "_from": "line-readable-stream@"
}
